package fingerprint

import (
	"fmt"
	"math/rand"
	"regexp"
	"strconv"
	"strings"
	"time"
)

var list = `
124.0.6367.252
126.0.6478.45
125.0.6422.169
127.0.6515.9
127.0.6517.2
127.0.6522.1
127.0.6522.0
127.0.6515.6
127.0.6521.1
127.0.6521.0
126.0.6478.41
126.0.6478.42
126.0.6478.43
126.0.6478.44
126.0.6478.37
126.0.6478.38
126.0.6478.39
126.0.6478.40
126.0.6478.36
126.0.6478.35
126.0.6478.34
127.0.6515.2
125.0.6422.168
127.0.6520.1
127.0.6520.0
124.0.6367.251
125.0.6422.165
125.0.6422.166
125.0.6422.167
127.0.6519.1
127.0.6519.0
125.0.6422.164
126.0.6478.33
124.0.6367.250
125.0.6422.163
124.0.6367.249
125.0.6422.160
125.0.6422.161
125.0.6422.162
125.0.6422.159
125.0.6422.156
125.0.6422.157
125.0.6422.158
125.0.6422.155
127.0.6518.2
127.0.6518.1
127.0.6518.0
127.0.6517.1
127.0.6517.0
126.0.6478.32
125.0.6422.154
124.0.6367.248
127.0.6516.3
126.0.6478.31
125.0.6422.153
127.0.6516.2
127.0.6516.1
127.0.6516.0
127.0.6515.1
127.0.6515.0
124.0.6367.247
126.0.6478.30
125.0.6422.152
127.0.6514.1
127.0.6514.0
124.0.6367.246
127.0.6512.2
127.0.6512.1
127.0.6512.0
125.0.6422.151
126.0.6478.29
124.0.6367.245
127.0.6510.5
127.0.6510.4
127.0.6510.3
127.0.6510.2
127.0.6511.1
127.0.6511.0
127.0.6510.1
127.0.6510.0
126.0.6478.28
126.0.6478.27
125.0.6422.147
125.0.6422.148
125.0.6422.149
125.0.6422.150
125.0.6422.146
120.0.6099.313
124.0.6367.244
125.0.6422.145
124.0.6367.243
125.0.6422.142
125.0.6422.143
125.0.6422.144
125.0.6422.141
127.0.6509.1
127.0.6509.0
127.0.6508.1
127.0.6508.0
126.0.6478.26
125.0.6422.140
124.0.6367.242
127.0.6507.3
126.0.6478.25
127.0.6507.2
127.0.6507.1
127.0.6507.0
124.0.6367.241
127.0.6506.2
127.0.6506.1
127.0.6506.0
126.0.6478.24
125.0.6422.139
124.0.6367.240
127.0.6505.1
127.0.6505.0
127.0.6504.1
127.0.6504.0
126.0.6478.23
124.0.6367.239
125.0.6422.138
127.0.6503.1
127.0.6503.0
127.0.6502.1
127.0.6502.0
126.0.6478.22
127.0.6496.3
124.0.6367.238
125.0.6422.137
127.0.6501.2
127.0.6501.1
127.0.6501.0
127.0.6500.1
127.0.6500.0
126.0.6478.21
125.0.6422.136
127.0.6496.2
127.0.6499.4
127.0.6499.3
124.0.6367.237
127.0.6499.2
127.0.6499.1
127.0.6499.0
127.0.6498.3
127.0.6497.2
127.0.6498.2
127.0.6498.1
127.0.6498.0
126.0.6478.20
125.0.6422.135
125.0.6422.134
124.0.6367.236
127.0.6497.1
127.0.6497.0
126.0.6478.19
127.0.6496.1
127.0.6496.0
126.0.6478.18
124.0.6367.235
125.0.6422.133
124.0.6367.234
124.0.6367.233
125.0.6422.83
125.0.6422.84
125.0.6422.85
125.0.6422.82
125.0.6422.113
125.0.6422.114
125.0.6422.115
125.0.6422.112
127.0.6495.1
127.0.6495.0
127.0.6494.1
127.0.6494.0
126.0.6478.17
124.0.6367.232
125.0.6422.132
126.0.6478.16
126.0.6478.15
127.0.6493.2
127.0.6493.1
127.0.6493.0
127.0.6492.1
127.0.6492.0
126.0.6478.14
125.0.6422.81
124.0.6367.231
125.0.6422.77
125.0.6422.78
125.0.6422.79
125.0.6422.80
125.0.6422.76
125.0.6422.72
125.0.6422.73
125.0.6422.74
125.0.6422.75
125.0.6422.71
127.0.6491.1
127.0.6491.0
127.0.6490.1
127.0.6490.0
126.0.6478.13
125.0.6422.70
124.0.6367.230
127.0.6489.1
127.0.6489.0
127.0.6488.1
127.0.6488.0
126.0.6478.12
125.0.6422.69
124.0.6367.229
127.0.6487.1
127.0.6487.0
127.0.6486.1
127.0.6486.0
126.0.6478.11
125.0.6422.68
124.0.6367.228
125.0.6422.67
127.0.6485.1
127.0.6485.0
127.0.6484.1
127.0.6484.0
124.0.6367.227
124.0.6367.226
126.0.6478.10
125.0.6422.66
127.0.6483.0
124.0.6367.225
120.0.6099.312
126.0.6478.9
124.0.6367.224
126.0.6478.8
126.0.6478.7
125.0.6422.65
120.0.6099.311
126.0.6478.6
126.0.6478.5
126.0.6478.4
124.0.6367.223
124.0.6367.222
125.0.6422.64
126.0.6478.3
125.0.6422.61
125.0.6422.62
125.0.6422.63
125.0.6422.60
126.0.6478.2
124.0.6367.221
125.0.6422.57
125.0.6422.58
125.0.6422.59
125.0.6422.53
125.0.6422.54
125.0.6422.55
125.0.6422.56
125.0.6422.52
126.0.6478.1
125.0.6422.51
126.0.6478.0
125.0.6422.50
124.0.6367.220
126.0.6477.4
126.0.6477.3
126.0.6477.2
126.0.6477.1
126.0.6477.0
126.0.6476.1
126.0.6476.0
125.0.6422.49
126.0.6475.1
126.0.6475.0
124.0.6367.219
126.0.6474.1
126.0.6474.0
125.0.6422.48
124.0.6367.218
126.0.6473.1
126.0.6473.0
126.0.6472.1
126.0.6472.0
125.0.6422.47
124.0.6367.217
126.0.6468.2
126.0.6471.1
126.0.6471.0
124.0.6367.184
124.0.6367.182
124.0.6367.183
124.0.6367.180
124.0.6367.181
124.0.6367.179
124.0.6367.208
124.0.6367.209
124.0.6367.210
124.0.6367.207
126.0.6470.1
126.0.6470.0
125.0.6422.46
126.0.6469.2
124.0.6367.206
126.0.6469.1
126.0.6469.0
126.0.6468.1
126.0.6468.0
124.0.6367.205
125.0.6422.45
120.0.6099.310
124.0.6367.178
124.0.6367.202
124.0.6367.203
124.0.6367.204
124.0.6367.176
124.0.6367.177
124.0.6367.174
124.0.6367.175
124.0.6367.172
124.0.6367.173
124.0.6367.171
124.0.6367.201
126.0.6467.2
126.0.6467.1
126.0.6467.0
126.0.6466.1
126.0.6466.0
125.0.6422.42
125.0.6422.43
125.0.6422.44
125.0.6422.41
125.0.6422.40
125.0.6422.39
125.0.6422.37
125.0.6422.38
125.0.6422.36
125.0.6422.35
125.0.6422.34
126.0.6465.2
124.0.6367.170
125.0.6422.33
125.0.6422.32
126.0.6465.1
126.0.6465.0
124.0.6367.167
124.0.6367.168
124.0.6367.169
124.0.6367.166
`

func extractFirstNumber(str string) string {
	// 使用 strings 包中的 Split 函数将字符串以点分割成切片
	parts := strings.Split(str, ".")

	// 获取切片的第一个元素（即第一个点前面的部分）
	firstPart := parts[0]

	return firstPart
}

// 生成自定义的 User-Agent 字符串
// https://www.browserscan.net/zh
// 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36'
func GenerateUserAgent() (string, string, string) {
	fullVersion := getRandomNonEmptyLine(list)
	majorVersion := extractFirstNumber(fullVersion)
	platform := "Windows NT 10.0; Win64; x64"
	webkit := "AppleWebKit/537.36"
	gecko := "(KHTML, like Gecko)"
	browser := "Chrome/" + fullVersion
	safari := "Safari/537.36"

	userAgent := fmt.Sprintf("Mozilla/5.0 (%s) %s %s %s %s", platform, webkit, gecko, browser, safari)
	return userAgent, fullVersion, majorVersion
}

func GenerateUserAgentByNum(num int) (string, string, string) {
	fullVersion := getRandomNonEmptyLineByNum(list, num)
	majorVersion := extractFirstNumber(fullVersion)
	platform := "Windows NT 10.0; Win64; x64"
	webkit := "AppleWebKit/537.36"
	gecko := "(KHTML, like Gecko)"
	browser := "Chrome/" + fullVersion
	safari := "Safari/537.36"

	userAgent := fmt.Sprintf("Mozilla/5.0 (%s) %s %s %s %s", platform, webkit, gecko, browser, safari)
	return userAgent, fullVersion, majorVersion
}

func GenerateUserAgentData(chromeVersion, fullVersion string) string {
	userAgentData := fmt.Sprintf("--luna_userAgentData=Google Chrome:%s-luna-Chromium:%s-luna-Not-A.Brand:24-luna-platform:Windows-luna-mobile:false-luna-ua_full_version:%s-luna-model:PC-luna-architecture:x86-luna-bitness:64-luna-platform_version:10.0.0",
		chromeVersion, chromeVersion, fullVersion)
	return userAgentData
}

// 从字符串中随机选择一个非空行并返回
func getRandomNonEmptyLine(str string) string {
	lines := strings.Split(str, "\n")
	for {
		// 随机选择一个行
		rand.Seed(time.Now().UnixNano())
		randomIndex := rand.Intn(len(lines))
		line := lines[randomIndex]
		// 如果选择的行不为空，则返回
		if line == "" {
			continue
		}
		re := regexp.MustCompile(`^(\d+)\.\d+\.\d+\.\d+$`)
		match := re.FindStringSubmatch(line)
		// 解析版本号中的数字
		versionNum, _ := strconv.Atoi(match[1])
		// 检查版本号是否在指定范围内
		if versionNum >= 124 && versionNum <= 127 {
			// 如果选择的行不为空，则返回
			return line
		}

	}
}

// 从字符串中随机选择一个非空行并返回
func getRandomNonEmptyLineByNum(str string, num int) string {
	lines := strings.Split(str, "\n")
	line := lines[num]
	return line

}
